# This is a basic workflow to help you get started with Actions

name: Test

on:
  workflow_call:
    inputs:
      bun-version:
        description: 'Bun Version'
        required: false
        type: string
      os:
        description: 'Operating System'
        required: false
        type: string
  workflow_dispatch:
    inputs:
      bun-version:
        description: 'Bun Version'
        required: false
        default: 'latest'
        type: string
      os:
        description: 'Operating System'
        required: false
        options:
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        default: 'ubuntu-latest'
        type: choice
  
  pull_request_target:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch
      # - "!main" # matches every branch except main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ${{ inputs.os || 'ubuntu-latest' }}
    timeout-minutes: 10
  
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - run: bun install

      - name: Test
        run: bun run test

  typecheck:
    runs-on: ${{ inputs.os || 'ubuntu-latest' }}
    timeout-minutes: 10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - run: bun install --ignore-scripts --frozen-lockfile

      - name: Typecheck
        run: bun run typecheck

  lint:
    # The type of runner that the job will run on
    runs-on: ${{ inputs.os || 'ubuntu-latest' }}
    timeout-minutes: 10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - run: bun install --ignore-scripts --frozen-lockfile

      - name: Lint
        run: bun run lint
    
  swiftlint:
    # The type of runner that the job will run on
    runs-on: ${{ inputs.os || 'macos-latest' }}
    timeout-minutes: 10

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - run: bun install --ignore-scripts --frozen-lockfile

      - run: brew install swiftlint

      - name: Lint
        run: bun run swiftlint
  
  build-ios-beta:
    # Only run on macOS since we need Xcode
    runs-on: macos-15
    timeout-minutes: 50

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --ignore-scripts --frozen-lockfile

      ## latest stable
      - run: sudo xcode-select -s /Applications/Xcode_26_beta.app

      - name: Install iOS 26 simulator runtime
        run: |
          xcodebuild -downloadPlatform iOS
          # optional but useful:
          xcrun simctl list runtimes

      - run: bun run nitro-codegen
        working-directory: packages/react-native-healthkit

      - name: Expo Prebuild
        working-directory: apps/example
        run: bunx expo prebuild --platform ios

      - name: Build iOS project
        working-directory: apps/example
        run: bun run build-sim


  build-ios:
    # Only run on macOS since we need Xcode
    runs-on: macos-15
    timeout-minutes: 50

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --ignore-scripts --frozen-lockfile

      ## latest stable
      - run: sudo xcode-select -s /Applications/Xcode_16.4.app

      - run: bun run nitro-codegen
        working-directory: packages/react-native-healthkit

      - name: Expo Prebuild
        working-directory: apps/example
        run: bunx expo prebuild --platform ios

      - name: Build iOS project
        working-directory: apps/example
        run: bun run build-sim


  # since this is the default for Expo 52
  # build-ios-162:
  #   # Only run on macOS since we need Xcode
  #   runs-on: macos-latest
  #   timeout-minutes: 30

  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v4

  #     - uses: oven-sh/setup-bun@v2

  #     - run: sudo xcode-select -s /Applications/Xcode_16.2.app

  #     - name: Install dependencies
  #       run: bun install --ignore-scripts --frozen-lockfile

  #     - run: bun run nitro-codegen
  #       working-directory: packages/react-native-healthkit

  #     - name: Expo Prebuild
  #       working-directory: apps/example
  #       run: bunx expo prebuild --platform ios

  #     - name: Build iOS project
  #       working-directory: apps/example
  #       run: bun run build-sim