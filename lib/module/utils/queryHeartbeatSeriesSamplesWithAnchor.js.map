{"version":3,"names":["deserializeHeartbeatSeriesSample","prepareOptions","Native","queryHeartbeatSeriesSamplesWithAnchor","options","opts","result","from","to","limit","anchor","deletedSamples","newAnchor","samples","map"],"sources":["queryHeartbeatSeriesSamplesWithAnchor.ts"],"sourcesContent":["import deserializeHeartbeatSeriesSample from './deserializeHeartbeatSeriesSample'\nimport prepareOptions from './prepareOptions'\nimport Native from '../native-types'\n\nimport type { DeletedHeartbeatSeriesSampleRaw } from '../native-types'\nimport type { GenericQueryOptions, HKHeartbeatSeriesSample } from '../types'\n\nexport type QueryHeartbeatSeriesSamplesResponse = {\n  readonly samples: readonly HKHeartbeatSeriesSample[],\n  readonly deletedSamples: readonly DeletedHeartbeatSeriesSampleRaw[],\n  readonly newAnchor: string\n}\n\nexport type QueryHeartbeatSeriesSamplesFn = (options: Omit<GenericQueryOptions, 'ascending'>) => Promise<QueryHeartbeatSeriesSamplesResponse>;\n\nconst queryHeartbeatSeriesSamplesWithAnchor: QueryHeartbeatSeriesSamplesFn = async (options) => {\n  const opts = prepareOptions(options)\n\n  const result = await Native.queryHeartbeatSeriesSamplesWithAnchor(\n    opts.from,\n    opts.to,\n    opts.limit,\n    opts.anchor,\n  )\n\n  return {\n    deletedSamples: result.deletedSamples,\n    newAnchor: result.newAnchor,\n    samples: result.samples.map(deserializeHeartbeatSeriesSample),\n  }\n}\n\nexport default queryHeartbeatSeriesSamplesWithAnchor\n"],"mappings":"AAAA,OAAOA,gCAAgC,MAAM,oCAAoC;AACjF,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,MAAM,MAAM,iBAAiB;AAapC,MAAMC,qCAAoE,GAAG,MAAOC,OAAO,IAAK;EAC9F,MAAMC,IAAI,GAAGJ,cAAc,CAACG,OAAO,CAAC;EAEpC,MAAME,MAAM,GAAG,MAAMJ,MAAM,CAACC,qCAAqC,CAC/DE,IAAI,CAACE,IAAI,EACTF,IAAI,CAACG,EAAE,EACPH,IAAI,CAACI,KAAK,EACVJ,IAAI,CAACK,MACP,CAAC;EAED,OAAO;IACLC,cAAc,EAAEL,MAAM,CAACK,cAAc;IACrCC,SAAS,EAAEN,MAAM,CAACM,SAAS;IAC3BC,OAAO,EAAEP,MAAM,CAACO,OAAO,CAACC,GAAG,CAACd,gCAAgC;EAC9D,CAAC;AACH,CAAC;AAED,eAAeG,qCAAqC"}